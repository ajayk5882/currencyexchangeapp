image: gradle:alpine

before_script:
  - GRADLE_USER_HOME="$(pwd)/.gradle"
  - export GRADLE_USER_HOME

build:
  stage: build
  script: gradle --build-cache assemble
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle

test:
  stage: test
  script: gradle check
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build
      - .gradle

deploy:
  stage: deploy
  script: echo "Define your deployment script!"
  environment: production



#image: java:8-jdk
#
#stages:
#  - build
#  - test
#  - deploy
#
#before_script:
#  #  - echo `pwd` # debug
#  #  - echo "$CI_BUILD_NAME, $CI_BUILD_REF_NAME $CI_BUILD_STAGE" # debug
#  - export GRADLE_USER_HOME=`pwd`/.gradle
#
#cache:
#  paths:
#    - .gradle/wrapper
#    - .gradle/caches
#
#build:
#  stage: build
#  script:
#    - ./gradlew assemble
#  artifacts:
#    paths:
#      - build/libs/*.jar
#  only:
#    - master
#
#test:
#  stage: test
#  script:
#    - ./gradlew check
#
#deploy:
#  stage: deploy
#  script:
#    - ./deploy
#
#after_script:
#  - echo "End CI"
#
#image: docker:latest
#services:
#  - docker:dind
#
#stages:
#  - build
#  - package
#  - deploy
#
#build:
#  image: gradle:8.3-jdk8-alpine
#  stage: build
#  script:
#    - gradle build
#  artifacts:
#    paths:
#      - build/libs/*.jar
#
#package:
#  stage: package
#  script:
#    - ./gradlew build
#  script:
#    - docker build -t registry.gitlab.com/mathflake/api .
#    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#    - docker push registry.gitlab.com/mathflake/api
#
#deploy_staging:
#  stage: deploy
#  script:
#    - apk upgrade && apk update
#    - apk add openssh-client
#    - apk add sshpass
#    - sshpass -p "$STAGING_SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $STAGING_SERVER_USER@$STAGING_SERVER docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#    - sshpass -p "$STAGING_SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $STAGING_SERVER_USER@$STAGING_SERVER docker pull registry.gitlab.com/mathflake/api
#    - sshpass -p "$STAGING_SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $STAGING_SERVER_USER@$STAGING_SERVER "docker container stop mathflake_api && docker container rm mathflake_api || true"
#    - sshpass -p "$STAGING_SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $STAGING_SERVER_USER@$STAGING_SERVER docker run --name mathflake_api -p 80:80 -d registry.gitlab.com/mathflake/api
#  environment:
#    name: staging
#    url: https://mathflake.com
#  only:
#    - develop














## This file is a template, and might need editing before it works on your project.
## This is a sample GitLab CI/CD configuration file that should run without any modifications.
## It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
## it uses echo commands to simulate the pipeline execution.
##
## A pipeline is composed of independent jobs that run scripts, grouped into stages.
## Stages run in sequential order, but jobs within stages run in parallel.
##
## For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
##
## You can copy and paste this template into a new `.gitlab-ci.yml` file.
## You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
##
## To contribute improvements to CI/CD templates, please follow the Development guide at:
## https://docs.gitlab.com/ee/development/cicd/templates.html
## This specific template is located at:
## https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
#
#stages:          # List of stages for jobs, and their order of execution
#  - build
#  - test
#  - deploy
#
#build-job:       # This job runs in the build stage, which runs first.
#  stage: build
#  script:
#    - echo "Compiling the code..."
#    - echo "Compile complete."
#
#unit-test-job:   # This job runs in the test stage.
#  stage: test    # It only starts when the job in the build stage completes successfully.
#  script:
#    - echo "Running unit tests... This will take about 60 seconds."
#    - sleep 60
#    - echo "Code coverage is 90%"
#
#lint-test-job:   # This job also runs in the test stage.
#  stage: test    # It can run at the same time as unit-test-job (in parallel).
#  script:
#    - echo "Linting code... This will take about 10 seconds."
#    - sleep 10
#    - echo "No lint issues found."
#
#deploy-job:      # This job runs in the deploy stage.
#  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#  environment: production
#  script:
#    - echo "Deploying application..."
#    - echo "Application successfully deployed."
